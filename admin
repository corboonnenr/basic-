// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AdvancedStorage {
    address public owner;
    address public admin;
    string public storedData;
    bool public settingEnabled = true;

    event DataStored(address indexed user, string data);
    event OwnerChanged(address indexed oldOwner, address indexed newOwner);
    event SettingEnabledChanged(bool enabled);

    modifier onlyOwnerOrAdmin() {
        require(msg.sender == owner || msg.sender == admin, "Only the owner or admin can call this function");
        _;
    }

    modifier settingIsEnabled() {
        require(settingEnabled, "Setting is currently disabled");
        _;
    }

    constructor() {
        owner = msg.sender;
        admin = msg.sender;
    }

    function set(string memory newData) external onlyOwnerOrAdmin settingIsEnabled {
        storedData = newData;
        emit DataStored(msg.sender, newData);
    }

    function get() external view returns (string memory) {
        return storedData;
    }

    function changeOwner(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Invalid new owner address");
        emit OwnerChanged(owner, newOwner);
        owner = newOwner;
    }

    function changeAdmin(address newAdmin) external onlyOwner {
        require(newAdmin != address(0), "Invalid new admin address");
        admin = newAdmin;
    }

    function enableSetting() external onlyOwner {
        settingEnabled = true;
        emit SettingEnabledChanged(true);
    }

    function disableSetting() external onlyOwner {
        settingEnabled = false;
        emit SettingEnabledChanged(false);
    }
}
